plugins {
  id 'java'
}

defaultTasks 'build'

group = 'com.github.robzorescue'

sourceCompatibility = '17'
targetCompatibility = '17'
version = '4.0'

dependencies {
  implementation fileTree(dir: 'lib', include: '*.jar')
  implementation 'com.github.roborescue:rcrs-server:master-SNAPSHOT'
  implementation 'com.github.roborescue:adf-core-java:master-SNAPSHOT'
  implementation 'log4j:log4j:1.2.17'
    implementation 'com.netflix.nebula:gradle-override-plugin:4.0.0'
    //implementation 'org.jscience:jscience:4.3.1'
  //implementation 'com.google.guava:guava:31.0.1-jre'
  //implementation 'com.google.code.findbugs:jsr305:3.0.2'

  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

//  compile files('libs/jsr305-3.0.1.jar')
//  compile fileTree(dir:'libs',include: ['*jar'])
  implementation fileTree(dir:'libs',include: ['*jar'])
}

repositories {
  mavenLocal()
  mavenCentral()


  maven {
    url = 'https://sourceforge.net/projects/jsi/files/m2_repo'
  }
  maven {
    url = 'https://repo.enonic.com/public/'
  }
  maven {
    url 'https://jitpack.io'
  }
//  flatDir{dirs 'libs'}
}

test {
  useJUnitPlatform()
}

javadoc {
  options {
    encoding = 'UTF-8'
    addStringOption('Xdoclint:none', '-quiet')
  }
}

clean {
  doFirst {
    delete file( new File( rootDir, 'bin' ) )
    delete file( new File( rootDir, 'build' ) )
    delete file( new File( rootDir, 'precomp_data' ) )
    delete file( new File( rootDir, 'test-results' ) )
  }
}

[compileJava, compileTestJava].each {
  it.options.encoding = 'UTF-8'
  it.options.compilerArgs += [ '-Xlint:unchecked', '-Xlint:deprecation' ]
}

task launch(type: JavaExec) {
  classpath = files('lib')
  classpath += files('.')
  classpath += sourceSets.main.runtimeClasspath
  mainClass = 'adf.core.Main'
  maxHeapSize = '32768m'
}
